// Place your key bindings in this file to override the defaultsauto[]
[
	// * Start --> VS Code Awesome
	// TODO: Panels

	{
		"key": "cmd+e",
		"command": "workbench.action.focusActiveEditorGroup"
	},

	{
		"key": "cmd+shift+g",
		"command": "workbench.view.scm"
	},
	{
		"key": "cmd+t",
		"command": "workbench.action.terminal.toggleTerminal"
	},

	// TODO: File Explorer
	// Collapse all Folder:     cmd + <-
	// rename:                  Enter
	// delete:                  cmd + backspace
	// new File:                cmd + n
	// new Folder:              cmd + shift + n
	// duplicate File:          cmd + d

	{
		"key": "cmd+d",
		"command": "duplicate.execute",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
	},
	{
		"key": "cmd+n",
		"command": "explorer.newFile",
		"when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
	},
	{
		"key": "shift+cmd+n",
		"command": "explorer.newFolder",
		"when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
	},
	{
		"key": "shift+cmd+n",
		"command": "explorer.newFolder",
		"when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
	},

	// TODO :  Fold/Unfold
	{
		"key": "shift+cmd+[BracketLeft]",
		"command": "editor.fold",
		"when": "editorFocus"
	},
	{
		"key": "shift+cmd+[BracketRight]",
		"command": "editor.unfold",
		"when": "editorFocus"
	},

	// TODO : Indent
	{
		"key": "cmd+[BracketRight]",
		"command": "editor.action.indentLines",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "cmd+[BracketLeft]",
		"command": "editor.action.outdentLines",
		"when": "editorTextFocus && !editorReadonly"
	},
	// TODO : Zoom
	{
		"key": "cmd+-",
		"command": "-workbench.action.zoomOut"
	},
	{
		"key": "alt+cmd+[BracketRight]",
		"command": "workbench.action.zoomIn"
	},
	{
		"key": "alt+cmd+-",
		"command": "workbench.action.zoomOut"
	},

	// TODO : Line Manipulation
	{
		"key": "cmd+j",
		"command": "editor.action.joinLines",
		"when": "editorTextFocus"
	},

	// TODO : Multi Cursor
	{
		"key": "cmd+backspace",
		"command": "editor.action.moveSelectionToPreviousFindMatch",
		"when": "editorFocus && editorHasMultipleSelections"
	},
	{
		"key": "cmd+k cmd+d",
		"command": "editor.action.moveSelectionToNextFindMatch",
		"when": "editorFocus && editorHasMultipleSelections"
	},
	{
		"key": "cmd+right",
		"command": "editor.action.insertCursorAtEndOfEachLineSelected",
		"when": "editorFocus && editorHasSelection"
	},

	// TODO: Emmet
	{
		"key": "cmd+m cmd+i",
		"command": "editor.emmet.action.balanceIn",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+o",
		"command": "editor.emmet.action.balanceOut",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+w",
		"command": "editor.emmet.action.wrapWithAbbreviation",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+m",
		"command": "editor.emmet.action.matchTag",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+e",
		"command": "editor.action.smartSelect.expand",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+r",
		"command": "editor.emmet.action.updateTag",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+m cmd+backspace",
		"command": "editor.emmet.action.removeTag",
		"when": "editorTextFocus"
	},

	// TODO: Terminal Split Panel
	{
		"key": "ctrl+n",
		"command": "workbench.action.terminal.split",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+l",
		"command": "workbench.action.terminal.focusNextPane",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+h",
		"command": "workbench.action.terminal.focusPreviousPane",
		"when": "terminalFocus"
	},
	{
		"key": "ctrl+w",
		"command": "workbench.action.terminal.kill",
		"when": "terminalFocus"
	},

	// TODO: Split Panels
	{
		"key": "ctrl+w",
		"command": "workbench.action.joinAllGroups",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+n",
		"command": "workbench.action.splitEditor",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+l",
		"command": "workbench.action.navigateRight",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+h",
		"command": "workbench.action.navigateLeft",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+[BracketRight]",
		"command": "workbench.action.increaseViewSize",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+-",
		"command": "workbench.action.decreaseViewSize",
		"when": "editorFocus"
	},

	// TODO: IntelliSense
	{
		"key": "cmd+r",
		"command": "workbench.action.gotoSymbol"
	},
	{
		"key": "cmd+shift+r",
		"command": "workbench.action.showAllSymbols"
	},
	{
		"key": "cmd+k cmd+enter",
		"command": "editor.action.goToDeclaration",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+k cmd+i",
		"command": "namespaceResolver.import"
	},

	// TODO: Project Switching
	{
		"key": "cmd+;",
		"command": "workbench.action.switchWindow"
	},
	// * End --> VS Code Awesome

	// Todo: Live Server
	{
		"key": "cmd+l cmd+c",
		"command": "-extension.liveServer.goOffline",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+l cmd+o",
		"command": "-extension.liveServer.goOnline",
		"when": "editorTextFocus"
	},
	{
		"key": "cmd+g cmd+l",
		"command": "extension.liveServer.goOnline"
	},
	{
		"key": "cmd+g cmd+o",
		"command": "extension.liveServer.goOffline"
	},

	// TODO: console.log
	{
		"key": "shift+space",
		"command": "editor.action.triggerSuggest",
		"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
	},
	{
		"key": "ctrl+space",
		"command": "-editor.action.triggerSuggest",
		"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
	}
]
